name: 'Checkout'
description: 'Checkout a Git repository at a particular version'
inputs:
  repository:
    description: 'Repository name with owner. For example, actions/checkout'
    required: false
    default: ''
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that event.
      Otherwise, uses the default branch.
    required: false
    default: ''
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT. We recommend using a service account
      with the least permissions necessary. Also when generating a new PAT, select the
      least scopes necessary. [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    required: false
    default: ''
  ssh-key:
    description: 'SSH private key for authentication'
    required: false
    default: ''
  ssh-known-hosts:
    description: >
      Known hosts in addition to the user and global host key database. The public
      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,
      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.
    required: false
    default: ''
  ssh-strict:
    description: >
      Whether to perform strict host key checking. When true, adds the options
      `StrictHostKeyChecking=yes` and `CheckHostIP=no` to the SSH command line. Use the
      input `ssh-known-hosts` to configure additional hosts.
    required: false
    default: true
  ssh-user:
    description: >
      The user to use when connecting to the remote SSH host. By default 'git' is used.
    required: false
    default: git
  persist-credentials:
    description: 'Whether to configure the token or SSH key with the local git config'
    required: false
    default: true
  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'
    required: false
    default: ''
  clean:
    description: 'Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching'
    required: false
    default: true
  filter:
    description: >
      Partially clone against a given filter.
      Overrides sparse-checkout if set.
    required: false
    default: ''
  sparse-checkout:
    description: >
      Do a sparse checkout on given patterns.
      Each pattern should be separated with new lines.
    required: false
    default: ''
  sparse-checkout-cone-mode:
    description: >
      Specifies whether to use cone-mode when doing a sparse checkout.
    required: false
    default: true
  fetch-depth:
    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'
    required: false
    default: 1
  fetch-tags:
    description: 'Whether to fetch tags, even if fetch-depth > 0.'
    required: false
    default: false
  show-progress:
    description: 'Whether to show progress status output when fetching.'
    required: false
    default: true
  lfs:
    description: 'Whether to download Git-LFS files'
    required: false
    default: false
  submodules:
    description: >
      Whether to checkout submodules: `true` to checkout submodules or `recursive` to
      recursively checkout submodules.
      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:`
      are converted to HTTPS.
    required: false
    default: false
  set-safe-directory:
    description: >
      Add repository path as safe.directory for Git global config by running
      `git config --global --add safe.directory <path>`
    required: false
    default: true
  github-server-url:
    description: >
      The base URL for the GitHub instance that you are trying to clone from, will use
      environment defaults to fetch from the same instance that the workflow is running
      from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com
    required: false
    default: ''

outputs:
  ref:
    description: 'The branch, tag or SHA that was checked out'
  commit:
    description: 'The commit SHA that was'
